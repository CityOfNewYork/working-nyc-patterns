// Dependencies
@use 'config/tokens';
@use 'config/typography';

// Variables
$scales: map-get(tokens.$tokens, 'scales');
$colors: map-get(tokens.$tokens, 'colors');
$shadows: map-get(tokens.$tokens, 'shadows');
$modes: map-get(tokens.$tokens, 'color-modes');

@mixin utils($token-selector, $token-key) {
  .text-#{$token-selector} {
    color: map-get($colors, $token-key) !important;
  }

  .bg-#{$token-selector} {
    background-color: map-get($colors, $token-key) !important;
  }

  .border-#{$token-selector} {
    border-color: map-get($colors, $token-key) !important;
  }

  .fill-#{$token-selector} {
    fill: map-get($colors, $token-key) !important;
  }

  .stroke-#{$token-selector} {
    stroke: map-get($colors, $token-key) !important;
  }
}

/**
 * Base mixin for setting text and background colors.
 *
 * @param  $combination  The combination set to use
 */
@mixin base($combination) {
  $token-text: map-get($combination, 'text');
  $token-text-primary: map-get($combination, 'text-primary');
  $token-text-secondary: map-get($combination, 'text-secondary');
  $token-text-tertiary: map-get($combination, 'text-tertiary');
  $token-text-alt: map-get($combination, 'text-alt');
  $token-background: map-get($combination, 'background');
  $token-smoothing: map-get($combination, 'smoothing');

  color: map-get($colors, $token-text);
  background-color: map-get($colors, $token-background);

  @if $token-smoothing {
    @include typography.font-smooth;
  } @else {
    @include typography.font-smooth-auto;
  }

  // Make our color utilities
  @include utils('alt', $token-text-alt);
  @include utils('primary', $token-text-primary);
  @include utils('secondary', $token-text-secondary);
  @include utils('tertiary', $token-text-tertiary);
}

/**
 * Styling hyperlink colors.
 *
 * @param  $combination  The combination set to use
 */
@mixin hyperlinks($combination) {
  $token-hyperlinks: map-get($combination, 'hyperlinks');
  $token-hyperlinks-hover: map-get($combination, 'hyperlinks-hover');
  $token-hyperlinks-visited: map-get($combination, 'hyperlinks-visited');

  a:not(.btn), .btn-link, .button-link {
    color: map-get($colors, $token-hyperlinks);

    &:hover, &:active, &:focus {
      color: map-get($colors, $token-hyperlinks-hover);
    }

    &:visited:not([href^='#']):not(.o-text-controller__languages a) {
      color: map-get($colors, $token-hyperlinks-visited);
    }
  }
}

/**
 * Styling card colors.
 *
 * @param  $combination  The combination set to use
 */
@mixin card($combination) {
  $token-card-header: map-get($combination, 'card-header');
  $token-card-body: map-get($combination, 'card-body');

  .color-card,
  .c-accordion,
  .c-card {
    background-color: map-get($colors, $token-card-body);
  }

  .color-card__header,
  .c-accordion__header,
  .c-card__header {
    background-color: map-get($colors, $token-card-header);
  }

  // .color-card__body,
  // .c-accordion__body,
  // .c-card__body {
  //   background-color: map-get($colors, $token-card-body);
  // }
}

/**
 * Modal color styling.
 *
 * @param  $combination  The combination set to use
 */
@mixin modal($combination) {
  $combination-modal: map-get($combination, 'modal');

  .color-modal,
  .o-search, .o-mobile-menu {
    @include base($combination-modal);
    @include hyperlinks($combination-modal);

    box-shadow: map-get($shadows, 'up');
  }
}

/**
 * Styling input colors.
 *
 * @param  $combination  The combination set to use
 */
@mixin input($combination) {
  $input: map-get($combination, 'input');
  $token-text: map-get($input, 'text');
  $token-background: map-get($input, 'background');
  $token-border: map-get($input, 'border');

  .input, .textarea, .select,
  .c-question-single .c-question__input {
    color: map-get($colors, $token-text);
    background: map-get($colors, $token-background);
    border-color: map-get($colors, $token-border);
  }
}

/**
 * Styling option colors.
 *
 * @param  $combination  The combination set to use
 */
@mixin option($combination) {
  $option: map-get($combination, 'option');

  $token-text: map-get($option, 'text');
  $token-border: map-get($option, 'border');
  $token-background: map-get($option, 'background');

  $token-text-hover: map-get($option, 'text-hover');
  $token-border-hover: map-get($option, 'border-hover');
  $token-background-hover: map-get($option, 'background-hover');

  $token-text-focus: map-get($option, 'text-focus');
  $token-border-focus: map-get($option, 'border-focus');
  $token-background-focus: map-get($option, 'background-focus');

  $token-text-checked: map-get($option, 'text-checked');
  $token-border-checked: map-get($option, 'border-checked');
  $token-background-checked: map-get($option, 'background-checked');

  $token-graphic-checkbox: map-get($option, 'graphic-checkbox');
  $token-graphic-checkbox-checked: map-get($option, 'graphic-checkbox-checked');

  .option > .option__base,
  .o-text-controller__languages a {
    color: map-get($colors, $token-text);
    background-color: map-get($colors, $token-background)
  }

  .option:hover > .option__base,
  .o-text-controller__languages a:hover {
    color: map-get($colors, $token-text-hover);
    border-color: map-get($colors, $token-border-hover);
    background-color: map-get($colors, $token-background-hover)
  }

  input:focus + .option__base {
    color: map-get($colors, $token-text-focus);
    border-color: map-get($colors, $token-border-focus);
    background-color: map-get($colors, $token-background-focus)
  }

  input:checked + .option__base {
    color: map-get($colors, $token-text-checked);
    background-color: map-get($colors, $token-background-checked);
  }

  /**
   * Checkbox Graphic
   */

  input[type='checkbox'] + .option__base > .option__graphic {
    stroke: map-get($colors, $token-graphic-checkbox);
  }

  input[type='checkbox']:checked + .option__base > .option__graphic {
    stroke: map-get($colors, $token-graphic-checkbox-checked);
  }
}

/**
 * Styling button colors.
 *
 * @param  $combination  The combination set to use
 */
@mixin button($combination) {
  @each $type, $combo in map-get($combination, 'button') {
    $token-text: map-get($combo, 'text');
    $token-background: map-get($combo, 'background');

    $token-text-hover: map-get($combo, 'text-hover');
    $token-background-hover: map-get($combo, 'background-hover');

    .btn-#{$type}, .button-#{$type} {
      color: map-get($colors, $token-text);
      background-color: map-get($colors, $token-background);

      &:link,
      &:visited {
        color: map-get($colors, $token-text);
        background-color: map-get($colors, $token-background);
      }

      &:hover,
      &:focus,
      &:active {
        color: map-get($colors, $token-text-hover);
        background-color: map-get($colors, $token-background-hover);
      }
    }
  }
}

/**
 * Styling code colors.
 *
 * @param  $combination  The combination set to use
 */
@mixin code($combination) {
  $code: map-get($combination, 'code');

  $token-text: map-get($code, 'text');
  $token-text-base: map-get($code, 'text-base');
  $token-text-keyword: map-get($code, 'text-keyword');
  $token-text-string: map-get($code, 'text-string');
  $token-text-comment: map-get($code, 'text-comment');
  $token-text-javascript: map-get($code, 'text-javascript');
  $token-text-css: map-get($code, 'text-css');
  $token-text-symbol: map-get($code, 'text-symbol');
  $token-text-code: map-get($code, 'text-code');
  $token-background: map-get($code, 'background');
  $token-border: map-get($code, 'border');

  code, .code, .code-block, pre, .hljs {
    color: map-get($colors, $token-text);
    background-color: map-get($colors, $token-background);
    border-color: map-get($colors, $token-border);
  }

  p code, li code, td code {
    color: map-get($colors, $token-text-code);
  }

  // pre, .hljs {
    // color: map-get($colors, $token-text-base);
    // background-color: map-get($colors, $token-background);
    // border-color: transparent;
  // }

  /**
   * Highlight.js Overrides
   */

  .css {
    color: map-get($colors, $token-text-css);
  }

  .javascript {
    color: map-get($colors, $token-text-javascript);
  }

  .hljs-attr, .hljs-name {
    color: map-get($colors, $token-text);
  }

  .hljs-comment {
    color: map-get($colors, $token-text-comment);
  }

  .hljs-keyword, .hljs-attribute, .hljs-selector-tag,
  .hljs-meta-keyword, .hljs-doctag, .hljs-name, .hljs-built_in {
    color: map-get($colors, $token-text-keyword);
  }

  .hljs-type, .hljs-string, .hljs-subst, .hljs-number, .hljs-selector-id,
  .hljs-selector-class, .hljs-quote, .hljs-template-tag, .hljs-deletion {
    color: map-get($colors, $token-text-string);
  }

  .hljs-regexp, .hljs-symbol, .hljs-variable, .hljs-template-variable,
  .hljs-link, .hljs-selector-attr, .hljs-selector-pseudo {
    color: map-get($colors, $token-text-symbol);
  }
}

@mixin statuses($combination) {
  @each $type, $combo in map-get($combination, 'statuses') {
    $token-text: map-get($combo, 'text');
    $token-background: map-get($combo, 'background');

    .color-status-#{$type}, .status-#{$type} {
      color: map-get($colors, $token-text);
      background-color: map-get($colors, $token-background);

      a:not(.btn) {
        color: inherit
      }
    }
  }
}

/**
 * The mode to set the color scale
 *
 * @param  $mode  The combination set to use
 */
@mixin set-scale-vars($mode: 'default') {
  $combination: map-get($modes, $mode);
  $scale: map-get($scales, $mode);

  // Set the shadow up token
  --shadow-up: #{map-get($combination, 'shadow-up')};

  // Set the color scale
  @each $level in $scale {
    --color-scale-#{$level}: #{map-get($colors, '#{$mode}-#{$level}')};
  }
}

/**
 * Styling card colors.
 *
 * @param  $combination  The combination set to use
 */
@mixin combination($mode: 'default') {
  $combination: map-get($modes, $mode);

  @include base($combination);
  @include hyperlinks($combination);
  @include card($combination);
  @include modal($combination);
  @include button($combination);
  @include input($combination);
  @include option($combination);
  @include code($combination);
  @include statuses($combination);
  // @include ...
}
